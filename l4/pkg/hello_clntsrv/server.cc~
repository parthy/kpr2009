/*
 * (c) 2008-2009 Technische Universit√§t Dresden
 * This file is part of TUD:OS and distributed under the terms of the
 * GNU General Public License 2.
 * Please see the COPYING-GPL-2 file for details.
 */
#include <stdio.h>
#include <l4/re/env>
#include <l4/re/namespace>
#include <l4/re/util/cap_alloc>
#include <l4/re/util/object_registry>
#include <l4/cxx/ipc_server>
#include <l4/cxx/iostream.h>
#include <l4/cxx/l4iostream.h>
#include <l4/cxx/string.h>

#include "shared.h"

static L4Re::Util::Object_registry my_registry(L4Re::Env::env()->main_thread(),
                                               L4Re::Env::env()->factory());

class Hello_server : public L4::Server_object
{
public:
  int dispatch(l4_umword_t obj, L4::Ipc_iostream &ios);
};

int
Hello_server::dispatch(l4_umword_t, L4::Ipc_iostream &ios)
{
  l4_msgtag_t t;
  ios >> t;

  // We're only talking the Hello protocol
  if (t.label() != Protocol::Hello)
    return -L4_EBADPROTO;

  L4::Opcode opcode;
  ios >> opcode;

  if(opcode == Opcode::func_show) {
	// first print prefix	
	l4_uint32_t length_string;

	ios >> length_string;

	char c;
	while(true) {
		ios >> c;
		if(c == 0) break;
		printf("%c", c);
		
	}
	printf(": ");

	// then the actual message
	ios >> length_string;

	char c;
	while(true) {
		ios >> c;
		if(c == 0) break;
		printf("%c", c);
		
	}
	printf("\n");

	return L4_EOK;
  }
  else
	return -L4_ENOSYS;
}

static L4::Server<L4::Basic_registry_dispatcher> server(l4_utcb());

int
main()
{
  static Hello_server hello;

  // Register calculation server
  my_registry.register_obj(&hello);

  // Register our service to be reachable for clients
  if (L4Re::Env::env()->names()->register_obj("hello_server", hello.obj_cap()))
    {
      printf("Could not register my service, readonly namespace?\n");
      return 1;
    }

  printf("Welcome to the Hello server!\n"
         "I can print hello.\n");

  // Wait for client requests
  server.loop();

  return 0;
}
